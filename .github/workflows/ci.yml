name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Ruff Linter
        run: uv run ruff check src/chronos_mcp tests

      - name: Run Ruff Formatter
        run: uv run ruff format src/chronos_mcp tests --check

      - name: Run MyPy
        run: uv run mypy src/chronos_mcp

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run unit tests with coverage
        run: |
          uv run pytest tests/unit/ --cov=src/chronos_mcp --cov-report=xml --cov-report=term --cov-fail-under=75

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run Bandit Security Scan
        run: |
          uv run bandit -r src/chronos_mcp -f screen

      - name: Run Safety Check
        run: |
          uv run safety scan

      - name: Run Complexity Check
        run: |
          uv run radon cc src/chronos_mcp --min=C --show-complexity || echo "⚠️  High complexity functions found"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv pip install radicale

      - name: Start Radicale Test Server
        run: |
          uv run python -m radicale --config tests/fixtures/radicale.conf &
          sleep 5  # Wait for server to start

      - name: Run integration tests
        run: |
          uv run pytest tests/integration/ -v
        env:
          CALDAV_TEST_URL: http://localhost:5232
          CALDAV_TEST_USER: testuser
          CALDAV_TEST_PASS: testpass

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv pip install build twine

      - name: Build distribution
        run: uv build

      - name: Check distribution
        run: uv run twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, build]
    if: always()

    steps:
      - name: Send Discord notification
        if: github.event_name == 'push'
        run: |
          echo "CI/CD pipeline completed for ${{ github.ref }}"
          # Add Discord webhook notification here
