[project]
name = "chronos-mcp"
version = "2.0.0"
description = "A comprehensive CalDAV MCP server for calendar management"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Code Developer", email = "code-developer@democratize.technology"}
]
maintainers = [
    {name = "Code Developer", email = "code-developer@democratize.technology"}
]
keywords = ["caldav", "calendar", "mcp", "fastmcp", "icalendar", "tasks", "journal"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastmcp>=2.0.0",
    "caldav>=1.3.0",
    "icalendar>=5.0.0",
    "pytz>=2024.1",
    "python-dateutil>=2.8.0",
    "pydantic>=2.0.0",
    "httpx>=0.27.0",
    "keyring>=24.0.0",
    "cryptography>=46.0.1",
]

[project.urls]
Repository = "https://github.com/democratize-technology/chronos-mcp"
Documentation = "https://github.com/democratize-technology/chronos-mcp#readme"
Issues = "https://github.com/democratize-technology/chronos-mcp/issues"
Changelog = "https://github.com/democratize-technology/chronos-mcp/blob/main/CHANGELOG.md"

[project.scripts]
chronos-mcp = "chronos_mcp.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.8.0",
    "mypy>=1.9.0",
    "radon>=6.0.1",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.5.0",
    "watchfiles>=1.0.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["chronos_mcp"]
package-dir = {"" = "src"}

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "radon>=6.0.1",
    "ruff>=0.8.0",
    "mypy>=1.9.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.5.0",
    "watchfiles>=1.0.0",
    "types-python-dateutil>=2.9.0.20251008",
]

# UV configuration
[tool.uv]
# UV-specific settings
package = true

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src"]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B904",   # raise-without-from-inside-except (intentional in some cases)
    "B008",   # function-call-in-default-argument (FastMCP Field usage)
    "RUF012", # mutable-class-default (intentional class-level constants)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests
"*/__init__.py" = ["F401"]  # Allow unused imports in __init__
"src/chronos_mcp/server.py" = ["E402"]  # Allow imports after initialization code

[tool.ruff.lint.isort]
known-first-party = ["chronos_mcp"]
force-single-line = false
lines-after-imports = 2

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true
no_strict_optional = true
check_untyped_defs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "chronos_mcp.tools.*"
disable_error_code = ["attr-defined", "call-arg", "arg-type"]

[[tool.mypy.overrides]]
module = "chronos_mcp.models"
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = "chronos_mcp.config"
disable_error_code = ["call-arg", "arg-type", "index"]

[[tool.mypy.overrides]]
module = "chronos_mcp.events"
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = "chronos_mcp.tasks"
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = "chronos_mcp.accounts"
disable_error_code = ["assignment"]
